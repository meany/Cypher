# ADDRESS FORMAT PROPOSAL

Address format proposal that greatly reduces the effect of typing and copy-paste mistakes, which greatly decreases the chances of users sending coins to addresses that are not owned by anyone.

Current address generation is in "`WalletService.NetworkAddress([public key])`" and uses the encoding of the Bitcoin address standard, which is a simple bytes to text conversion.


Proposed format:
* Prefix (like "tgm_"). Used for quick detection, but not required for transactions. Fixed size.
* Version (also used for network type: testnet, mainnet). Each version should have a different checksum seed. Fixed size. The testnet can have the same version forever because only one needs to be active at a time.
* Body = Base32Text(Public key). Variable size. This can't be hashed because Tangram expects to be able to extract the public key from the address.
* Checksum = Base32Text(First 5 bytes of SHA256(Checksum seed || Version || Body)). Fixed size, at the end.

Addresses are case insensitive.

The prefix makes it easy for people to distinguish Tangram addresses, but is not required for transactions. A prefix should still be present for users to see, and for software that works with multiple currencies to be able to make quick decisions.

The version is encoded as separate text in order to make it easy for address parsers to know whether they should process an address without decoding the entire text to a byte array (which could cause exceptions).

The address body and checksum are formatted in base 32, with the Crockford alphabet. For user friendly addresses, the encoding should be base 32 because it's easier to spell them, and on mobile keyboards both letters and digits can be typed with a single tap, while having lower and upper case letters can require 2 taps. Maybe not that important since addresses will most likely be copy-pasted on mobile.

The textual checksum has a fixed size so that parsers don't require a separator to be able to extract the checksum.

The address body and checksum are independently encoded to text so that the binary checksum can fit perfectly into the textual checksum, so as to not confuse users (see the "CONSIDERATIONS" section below).

The checksum ensures the integrity of addresses. It virtually eliminates typing and copy-paste mistakes, which greatly decreases the chances of users sending coins to addresses that are not owned by anyone.

The unique checksum seed exists in order to ensure that the address checksum is specific to Tangram. This eliminates the need to have a Tangram specific address prefix, like "tgm_". This way, even if a different cryptocurrency uses the same address format, by using a different seed the checksum would not match in Tangram wallets and would therefore be (cryptographically) rejected. The mainnet and testnet use different seeds.

Examples of Tangram addresses (for mainnet):
* Wallet address = 0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20212223242526272829
* Network address = 010A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20212223242526272829
* With prefix = tgm_1185GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MGSFNWEJAB
* Without prefix = 1185GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MGSFNWEJAB
* With wrong prefix = tgn_1185GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MGSFNWEJAB
* With wrong version = tgm_Z185GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MGSFNWEJAB
* With wrong body = tgm_1285GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MGSFNWEJAB
* With wrong checksum = tgm_1185GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MGTFNWEJAB

For the testnet, the same public key produces the following address: tgm_0185GR38E1W8124GK2GAHC5RR34D1P70X3RFJ08924CJ2A9H750MG40WBM183. Notice that the version and the checksum are different, while the body is the same (because it's generated from the same public key).


## CONSIDERATIONS

This is a scenario to consider when deciding how many bytes to use for the cheksum, and what base for the text conversion.

It's possible that the textual checksums ABCDEFG and ABCDEFH may represent the same binary checksum 0x12345678. This is when the binary checksum has 4 bytes (32 bits), while the textual checksum in base 32 has 7 characters which means 7 chars * 5 bits = 35 bits, which means that 3 bits from the textual checksum can vary without changing the binary checksum.

There are 2 possible solutions to fix this:
* Use 4 bytes (32 bits) for the binary checksum and base 16 for the textual checksum (4 bits per character), since 8 characters * 4 bits = 32 bits is a perfect fit.
* Use 5 bytes (40 bits) for the binary checksum and base 32 for the textual checksum (5 bits per character), since 8 characters * 5 bits = 40 bits is a perfect fit.

Either of these solutions adds 1 more character to the address, compared to using 4 bytes for the binary checksum and base 32 for the textual checksum.

The second solution looks best since the same number of characters (8) represent a lot more combinations (1 trillion versus 4 billions), so it has a much lower probability to make mistakes.
